version: '3'
services:
  ui:
    build: ./ui
    ports:
      - "3001:3000"
    volumes:
      - ./ui:/usr/src/app
    links:
      - api
  api:
    build: ./backend
    ports:
      - "8000:3000"
    volumes:
      - ./backend:/usr/src/app
    links:
      - mysql
  test-runner:
    build: 
      context: ./test-runner
      args:
        - TEST_ASSET
        - TEST_CURRENCY
        - TEST_EXCHANGE
        - TEST_TIME
    environment:
      MYSQL_HOST: crypto_db
      GEKKO_HOST: gekko
      GEKKO_PORT: 3000
    volumes:
      - ./test-runner:/usr/src/app:rw
    links:
      - mysql
      - gekko
  mysql:
    restart: always
    build: ./db/mysql
    environment:
      MYSQL_USER: crypto
      MYSQL_PASSWORD: 123
      MYSQL_ROOT_PASSWORD: 123
    ports:
      - "3306:3306"
    volumes:
      - ./db/mysql/schema/config.sql:/docker-entrypoint-initdb.d/000.sql
      - ./db/mysql/schema/createTables.sql:/docker-entrypoint-initdb.d/001.sql
      - ./db/mysql/schema/addBaseData.sql:/docker-entrypoint-initdb.d/002.sql
    healthcheck:
      test: ["CMD", "mysql", "-u", "crypto", "backtests", "-e", "SELECT * FROM trade_types"]
      interval: 5s
      retries: 8
  mongo:
    restart: always
    build: ./db/mongo
    ports:
      - "27017:27017"
  gekko:
    # restart: always
    build: ./gekko
    volumes:
      # - ./gekko:/usr/src/app:rw
      - ./gekko/volumes/gekko/history:/usr/src/app/history
      - ./gekko/config.js:/usr/src/app/config.js
    links:
      - redis
      - mysql
    environment:
      HOST: localhost
      PORT: 3000
    ports:
     - "3000:3000"
## optionally set nginx vars if you wish to frontend it with nginx
#    environment:
#     - VIRTUAL_HOST=gekko
#     - PORT=3000
#     - DOMAIN=gekko
  redis:
    image: redis:latest
    volumes:
      - ./gekko/volumes/redis:/data
